{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "04 Additional configuration environments ⚙️",
  "steps": [
    {
      "directory": "conf/prod",
      "description": "## Setting up an additional configuration environment\n\n- Kedro is heavily influenced by the [12 Factor App](https://12factor.net/config)\n- The approach to configuration in Kedro will seem familiar once reading through the manifesto.\n- You can read the full Additional Configuration Env [documentation here](https://kedro.readthedocs.io/en/latest/04_kedro_project_setup/02_configuration.html#additional-configuration-environments).\n\n### You can run Kedro under certain evironments via a CLI command or a `KEDRO_ENV` environment variable:\n\n- Configuration environments are defined via folder structures. \n- One could think about it this way '`kedro run --env=base`' is implictly run when not provided. \n- The folder structure in this project introduces an additional 'prod' environment:\n\n```\n├── base                               ⬅️ Default in regular kedro runs\n│   ├── catalog*.yml\n│   ├── globals.yml \n│   ├── logging.yml\n│   └── parameters\n│       ├── data_ingestion.yml\n│       ├── feature_engineering.yml\n│       └── modelling.yml  \n├── info.log\n├── local\n│   └── credentials.yml\n└── prod                               🚀 Will take precedence/override in a production run\n    ├── globals.yml \n    └── parameters\n        └── modelling.yml  \n```"
    },
    {
      "file": "conf/prod/parameters/modelling.yml",
      "description": "## Providing an override for an existing paramter\n\n- Kedro can override specific keys within the configuration scope at an arbitary level of nesting\n- In this example we will override one key within the `split_options` key that is primarily documented in `conf/base/parameters/modelling.yml`\n- However, in production runs, this value will be overriden and the following mapping will be rendered at runtime:\n\n```yaml\nsplit_options:\n   test_size: 0.4\n   random_state: 3\n   target: \"price\"\n```",
      "line": 2,
      "selection": {
        "start": {
          "line": 2,
          "character": 3
        },
        "end": {
          "line": 2,
          "character": 17
        }
      }
    },
    {
      "file": "conf/prod/globals.yml",
      "description": "### Providing an override for a templated varaible\n\nThe catalogs in this project look like so:\n\n```yaml\n\nprm_spine:\n  type: pandas.ParquetDataSet\n  filepath: ${base_location}/03_primary/prm_spine.pq\n  layer: primary\n```\n\n- The default `base_location` stored in `conf/prod/globals.yml` points to the local `data/` folder for local testing.\n- This override means that any production runs are executed on the cloud and point to different locations.",
      "line": 1
    }
  ]
}
